/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-07-15 10:03:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.test_005fapi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mapExample05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>first</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>지도에 여러 개의 마커 표시하기</h1>\r\n");
      out.write("	위도 :\r\n");
      out.write("	<span id=\"lat\"></span>, 경도 :\r\n");
      out.write("	<span id=\"lng\"></span>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		var lat = 0;\r\n");
      out.write("		var lng = 0;\r\n");
      out.write("		navigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("			lat = position.coords.latitude;\r\n");
      out.write("			lng = position.coords.longitude;\r\n");
      out.write("		});\r\n");
      out.write("		document.getElementById(\"lat\").innerHTML = lat;\r\n");
      out.write("		document.getElementById(\"lng\").innerHTML = lng;\r\n");
      out.write("	</script>\r\n");
      out.write("	<!-- 지도를 표시할 div 입니다 -->\r\n");
      out.write("	<div id=\"map\" style=\"width: 600px; height: 400px;\"></div>\r\n");
      out.write("	<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0874d4b0d4aba7c91a4fb77d9a303727\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("		mapOption = {\r\n");
      out.write("			center : new kakao.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n");
      out.write("			level : 4\r\n");
      out.write("		// 지도의 확대 레벨\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다\r\n");
      out.write("		var map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\r\n");
      out.write("		//마커가 표시될 위치가 여러개인 경우\r\n");
      out.write("		var positions = [ \r\n");
      out.write("		{\r\n");
      out.write("			title : '카카오',\r\n");
      out.write("			latlng : new kakao.maps.LatLng(lat, lng)\r\n");
      out.write("		}, {\r\n");
      out.write("			title : '생태연못',\r\n");
      out.write("			latlng : new kakao.maps.LatLng(lat+0.0001, lng+0.0003)\r\n");
      out.write("		}, {\r\n");
      out.write("			title : '텃밭',\r\n");
      out.write("			latlng : new kakao.maps.LatLng(lat+0.0003, lng+0.0003)\r\n");
      out.write("		}, {\r\n");
      out.write("			title : '근린공원',\r\n");
      out.write("			latlng : new kakao.maps.LatLng(lat+0.0009, lng+0.0003)\r\n");
      out.write("		} ];\r\n");
      out.write("		// 마커 이미지의 이미지 주소입니다\r\n");
      out.write("		var imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; \r\n");
      out.write("		for (var i = 0; i < positions.length; i ++) {\r\n");
      out.write("		    // 마커 이미지의 이미지 크기 입니다\r\n");
      out.write("		    var imageSize = new kakao.maps.Size(24, 35); \r\n");
      out.write("		    \r\n");
      out.write("		    // 마커 이미지를 생성합니다    \r\n");
      out.write("		    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("		    \r\n");
      out.write("		    // 마커를 생성합니다\r\n");
      out.write("		    var marker = new kakao.maps.Marker({\r\n");
      out.write("		        map: map, // 마커를 표시할 지도\r\n");
      out.write("		        position: positions[i].latlng, // 마커를 표시할 위치\r\n");
      out.write("		        title : positions[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n");
      out.write("		        image : markerImage // 마커 이미지 \r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
